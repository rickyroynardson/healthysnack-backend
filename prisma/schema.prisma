generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductCategory {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Product {
  id                Int               @id @default(autoincrement())
  name              String
  price             Int               @default(0)
  stock             Int               @default(0)
  productCategoryId Int
  productCategory   ProductCategory   @relation(fields: [productCategoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  ProductSale       ProductSale[]
  ProductMaterial   ProductMaterial[]
}

model Inventory {
  id                Int                 @id @default(autoincrement())
  name              String
  stock             Int                 @default(0)
  unit              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  InventoryPurchase InventoryPurchase[]
}

enum ProductLogType {
  INCREASE
  DECREASE
  UPDATE
  RESET
  SOLD
}

model ProductLog {
  id          Int            @id @default(autoincrement())
  description String
  type        ProductLogType
  createdAt   DateTime       @default(now())
}

enum InventoryLogType {
  INCREASE
  DECREASE
  UPDATE
  PURCHASE
}

model InventoryLog {
  id          Int              @id @default(autoincrement())
  description String
  memo        String?
  type        InventoryLogType
  createdAt   DateTime         @default(now())
}

model ProductMaterial {
  id        Int     @id @default(autoincrement())
  name      String
  quantity  Int     @default(0)
  unit      String
  price     Int     @default(0)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Purchase {
  id                Int                 @id @default(autoincrement())
  invoiceNumber     String              @unique
  vendor            String
  orderDate         DateTime
  memo              String
  total             Int                 @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  InventoryPurchase InventoryPurchase[]
}

model InventoryPurchase {
  id          Int       @id @default(autoincrement())
  quantity    Int
  price       Int
  purchaseId  Int
  inventoryId Int
  purchase    Purchase  @relation(fields: [purchaseId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Sale {
  id            Int           @id @default(autoincrement())
  invoiceNumber String        @unique
  total         Int           @default(0)
  ProductSale   ProductSale[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model ProductSale {
  id        Int      @id @default(autoincrement())
  quantity  Int
  productId Int
  saleId    Int
  product   Product  @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  sale      Sale     @relation(fields: [saleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
